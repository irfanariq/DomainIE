/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package id.ac.itb.gui.progressbar;

import id.ac.itb.openie.preprocess.Preprocessor;
import id.ac.itb.openie.preprocess.PreprocessorPipeline;
import org.apache.commons.lang3.StringUtils;

import javax.swing.*;

/**
 *
 * @author elvanowen
 */
public class PreprocessorProgress extends javax.swing.JFrame {

    PreprocessorPipeline preprocessorPipeline;
    private Timer processTimer = null;
    private int tick;
    private int counter = 0;

    /**
     * Creates new form PreprocessorProgress
     */
    public PreprocessorProgress() {
        initComponents();
    }

    public PreprocessorProgress(PreprocessorPipeline preprocessorPipeline) {
        this.preprocessorPipeline = preprocessorPipeline;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jProgressBar1 = new javax.swing.JProgressBar();
        runningPreprocessorLabel = new javax.swing.JLabel();
        postprocessingDocumentsProgressLabel = new javax.swing.JLabel();
        postprocessingPipelineProgressLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        runningPreprocessorLabel.setText("Setting up preprocessors");

        showProgressLabel();

        processTimer = new Timer(30, e -> {
            showProgressLabel();
        });
        processTimer.start();

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(runningPreprocessorLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(postprocessingPipelineProgressLabel)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(postprocessingDocumentsProgressLabel)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(runningPreprocessorLabel)
                    .addComponent(postprocessingPipelineProgressLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(postprocessingDocumentsProgressLabel)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
        setTitle("Preprocessing Progress");
    }// </editor-fold>//GEN-END:initComponents

    private void showProgressLabel() {
        counter++;
        int totalCurrentlyDocumentsPreprocessed = preprocessorPipeline.getCurrentlyPreprocessedDocuments();
        int totalDocumentsToBePreprocessed = preprocessorPipeline.getTotalDocumentsToBePreprocessed();
        String preprocessorName = "";
        String trail = StringUtils.repeat(".", tick) + StringUtils.repeat(" ", 4 - tick);

        if (counter % 10 == 0) {
            tick = (tick % 4) + 1;
        }

        if (preprocessorPipeline.getCurrentlyRunningPreprocessor() != null) {
            preprocessorName = ((Preprocessor)preprocessorPipeline.getCurrentlyRunningPreprocessor()).getPreprocessorHandler().getPluginName();
        }

        if (totalDocumentsToBePreprocessed > 0 && totalCurrentlyDocumentsPreprocessed == totalDocumentsToBePreprocessed) {
            postprocessingDocumentsProgressLabel.setText("Preprocessed Completed. Loading" + trail);
        } else {
            postprocessingDocumentsProgressLabel.setText(" " + totalCurrentlyDocumentsPreprocessed + " / " + totalDocumentsToBePreprocessed + " documents ");
        }

        updateProgressBar(totalCurrentlyDocumentsPreprocessed, totalDocumentsToBePreprocessed);

        int totalProcessedPreprocessor = preprocessorPipeline.getTotalProcessedPreprocessor();
        int totalPreprocessor = preprocessorPipeline.getNumberOfPreprocessors();

        if (preprocessorName.equalsIgnoreCase("")) {
            runningPreprocessorLabel.setText("Setting up preprocessors" + trail + StringUtils.repeat(" ", 40));
        } else {
            runningPreprocessorLabel.setText("Running " + preprocessorName + " ( " + totalProcessedPreprocessor + " / " + totalPreprocessor + " preprocessor" + (totalPreprocessor > 1 ? "s" : "") + " )");
        }
    }

    private void updateProgressBar(int numerator, int denominator) {
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(denominator);
        jProgressBar1.setValue(numerator);
    }

    public void stopTimer() {
        processTimer.stop();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreprocessorProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreprocessorProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreprocessorProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreprocessorProgress.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreprocessorProgress().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JLabel postprocessingDocumentsProgressLabel;
    private javax.swing.JLabel postprocessingPipelineProgressLabel;
    private javax.swing.JLabel runningPreprocessorLabel;
    // End of variables declaration//GEN-END:variables
}
